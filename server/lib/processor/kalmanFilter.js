require('./sylvester.src');
require('./kalman');

/**
 * 卡尔曼滤波器
 * @param Z 观测值 一维数组
 * @param F 状态转移矩阵 二维数组
 */
// export const kalmanFilter = function (Z, F) {
let x_0 = $V([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
let P_0 = $M([
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ]
);
let F_k = $M(F);//状态转移矩阵
let Q_k = $M([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]
);
let KM = new KalmanModel(x_0, P_0, F_k, Q_k);

let z_k = $V(Z);//观测向量
let H_k = Matrix.I(12);//观测矩阵
let R_k = $M([[4]]);//观测噪声方差
let KO = new KalmanObservation(z_k, H_k, R_k);

KO.z_k = z_k;

KM.update(KO);
console.log(JSON.stringify(KM.x_k.elements));

/*for (let i = 0; i < 200; i++) {
    z_k = $V([0.5 + Math.random()]);
    KO.z_k = z_k;
    KM.update(KO);
    console.log(JSON.stringify(KM.x_k.elements));
}*/
// }

